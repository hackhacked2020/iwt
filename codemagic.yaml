# Configuration Codemagic pour Android Natif
workflows:
  android-workflow:
    name: Build Android Natif & Publier sur le Play Store
    environment:
      groups:
        - play_console_credentials
        - keystore_credentials
      vars:
        PACKAGE_NAME: "dcmchonorable.iwt"
    scripts:
      # --- Étape de diagnostic ---
      - name: Diagnostiquer la structure du projet
        script: |
          echo "Structure du projet :"
          ls -la
          echo ""
          echo "Fichiers build.gradle :"
          find . -name "build.gradle" -exec echo {} \;
          echo ""
          echo "Recherche de gradle wrapper :"
          find . -name "gradle-wrapper.properties" -exec cat {} \;

      # --- Étape 1 : Créer le wrapper Gradle 6.9.4 manuellement ---
      - name: Créer le wrapper Gradle manuellement
        script: |
          # Créer la structure de dossier gradle
          mkdir -p gradle/wrapper
          
          # Télécharger directement la version 6.9.4 de Gradle
          curl -L https://services.gradle.org/distributions/gradle-6.9.4-bin.zip -o gradle-6.9.4-bin.zip
          unzip gradle-6.9.4-bin.zip
          mv gradle-6.9.4 gradle
          rm gradle-6.9.4-bin.zip
          
          # Créer le script gradlew manuellement
          cat > gradlew << 'EOL'
#!/usr/bin/env bash

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn ( ) {
    echo "$*"
}

die ( ) {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/bin/java" ] ; then
        JAVACMD="$JAVA_HOME/jre/bin/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -a "$MAX_FD_LIMIT" > 0 ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

ENV_BEGIN=$(env)

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APP_HOME=`cygpath --path --windows "$APP_HOME"`
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
fi

exec "$JAVACMD" \
    $JAVA_OPTS \
    $DEFAULT_JVM_OPTS \
    -classpath "$CLASSPATH" \
    -Dorg.gradle.appname=$APP_BASE_NAME \
    org.gradle.wrapper.GradleWrapperMain \
    "$@"
EOL

          chmod +x gradlew
          echo "Gradle wrapper 6.9.4 créé manuellement"

      # --- Étape 2 : Décoder le keystore de signature ---
      - name: Décoder le keystore de signature
        script: |
          echo $CM_KEYSTORE | base64 --decode > app/keystore.jks
          echo "Keystore décodé avec succès."

      # --- Étape 3 : Créer le fichier key.properties ---
      - name: Créer le fichier key.properties
        script: |
          cat > app/key.properties <<EOL
          storeFile=keystore.jks
          storePassword=$CM_KEYSTORE_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          keyPassword=$CM_KEY_PASSWORD
          EOL
          echo "Fichier key.properties créé."

      # --- Étape 4 : Construire l'Android App Bundle (AAB) signé ---
      - name: Build Android App Bundle (AAB)
        script: |
          ./gradlew bundleRelease --no-daemon --warning-mode=none
          echo "Build AAB terminé."

    artifacts:
      - app/build/outputs/bundle/release/**/*.aab

    publishing:
      email:
        recipients:
          - votre.email@exemple.com
      google_play:
        credentials: $PLAY_STORE_CREDENTIALS
        track: internal
